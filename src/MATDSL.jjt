{
  LOOKAHEAD= 1;
}

PARSER_BEGIN(MATDSL)

import java.util.HashMap;

public class MATDSL{
  private static HashMap < String, double[][] > Vars = new HashMap < String, double[][] > ();
  public static void main(String args []) throws ParseException  {

    MATDSL matrix = new MATDSL(System.in);
    SimpleNode root = matrix.Exp();

    root.dump();
  }
}

PARSER_END(MATDSL)

SKIP:{  " " | "\r" | "\t"}

TOKEN:{  < INTEGER: (["0"-"9"])+ >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < TRANSPOSE: "'" >
| < INVERSE: "^" >
| < ADJOINT: "$" >
| < LF : "\n" >
| < DOT: "." >
| < SEMICOLON : ";" >
| < COLON : ":" >
| < OPEN_CBRACKET : "(" >
| < CLOSE_CBRACKET : ")" >
| < OPEN_SBRACKET : "[" >
| < CLOSE_SBRACKET : "]" >
| < REAL : (< INTEGER >)+ (< DOT >) (<INTEGER >)* >
| < SYMBOL : [ "A"-"Z", "a"-"z" ]([ "0"-"9", "A"-"Z", "a"-"z" ])* >
| < BEGIN : "/* MATDSL" >
| < END : "*/" >
| < INPUT:"Input" >
| < OUTPUT:"Output" >
| < TYPE: ("int"|"double"|"float"|"long"|"short") >
}

SimpleNode Exp():{}
{
    < BEGIN > Code() < END >    {      return jjtThis;    }    }

void SaveValues() #void:{
  Token variable, equalSymbol, value;}
{
  variable = < SYMBOL >
  equalSymbol = "="
  value = double[][];
  {    < TYPE >[][] newValue = Vars.get(variable.image);
    if (newValue == null)    {
      Vars.put(variable.image, value.image);    }
    else
    {
      System.out.println("Variable '" + variable.image + "' already defined with value " + newValue);    }  }

void Code():{}
//Alterar para receber varios inputs-----------------------------------------------------{
  Input() Outexp()}

void Input():{}{
  < INPUT > < SYMBOL > < COLON > Matrix() < SEMICOLON > }

void Outexp():{}{
  Output() Outexp() Expression()
| Output() Expression()
| < EPS >}

void Output():{}{
  < OUTPUT > < SYMBOL > < COLON > Matrix() < SEMICOLON >}

void Matrix():{}{
  < TYPE > < OPEN_SBRACKET > < INTEGER > < CLOSE_SBRACKET > < OPEN_SBRACKET > < INTEGER > < CLOSE_SBRACKET >}

void Expression():{}{
  Indentifier() < EQUALS > Expr()}

void Expr():{}{
  Expr2() ExprL()}

void ExprL():{}{
  < OP1 > Expr2() ExprL()
| < EPS >}

void Expr2():{}{
  Term() Expr2L()}

void Expr2L():{}{
  < OP2 > Term() Expr2L()
| < EPS >}

void Term():{}{
  Identifier() TermL()}

void TermL():{}{
  < OP3 > TermL()
| < EPS >}

void Identifier():{}{
  < SYMBOL >
| < SYMBOL > < OPEN_CBRACKET > < INTEGER > < COLON > < INTEGER > < CLOSE_CBRACKET >  }











